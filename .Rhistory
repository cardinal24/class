# reproduce the above results here
dt2 <- table(dt$condition, dt$exchangeinfo) #contingency table
ggplot(dt) + aes(x = condition, fill = exchangeinfo) +
geom_bar () +
scale_fill_hue()
test <- chisq.test(dt2)
test
summary(test)
## reproduce the above results here - we know that the relationship between condition is significantly related to number of times people exchanges information and that the hypothetical (0) condition is associated with less exchange of information - we see the real condition is associated with more (1 vs 2) exchange info, the null hypothesis h0 is that there is no significant difference between condition and exchanging information, which is rejected at w p.016 . as we dig deeper we see that the relationship shows that people in the real condition were less likely to reject exchanging info.
dt2
dt
glimpse(dt)
var(dt)
head(dt)
head(dt)
test <- chisq.test(dt2)
test
summary(test)
dt$condition
dt$condition <- to_factor(dt$condition)
dt$exchangeinfo
dt$condition
dt$exchangeinfo
dt$exchangeinfo <- to_factor(dt$exchangeinfo)
dt
dt$exchangeinfo2 <- to_factor(dt$exchangeinfo)
dt
dt$exchangeinfo <- to_factor(dt$exchangeinfo)
dt
#create table with key variabbles
dt <- d %>% select(ID, condition, exchangeinfo, otherfocused_motives, selffocused_motives, selfattractive, otherattractive)
#came back with notes and turned these to factors
dt$condition <- to_factor(dt$condition)
dt$exchangeinfo <- to_factor(dt$exchangeinfo)
dt
kable(dt$condition, dt$exchangeinfo)
c.table <- table(dt$condition, dt$exchangeinfo)
kable(dt$condition, dt$exchangeinfo)
summary(dt)
dt$ID <- to_factor(dt$ID)
dt
summary(dt)
#create table with key variabbles
dt <- d %>% select(ID, condition, exchangeinfo, otherfocused_motives, selffocused_motives, selfattractive, otherattractive)
#came back with notes and turned these to factors
dt$condition <- to_factor(dt$condition)
dt$exchangeinfo <- to_factor(dt$exchangeinfo)
dt
dt %>% filter(condition == 0, exchangeinfo == 2) %>%
nrow()  ##how many people chose not to exchange contact info in the hypothetical condition? 51
dt %>% filter(condition == 0, exchangeinfo == 1) %>%
nrow() ## 10 chose to exchange
dt %>% filter(condition == 1, exchangeinfo == 2) %>%
nrow()  #how many chose not to exchange in the real? 45
dt %>% filter(condition == 1, exchangeinfo == 1) %>%
nrow() ##26 chose to exchange
summary(dt)
c.table <- table(dt$condition, dt$exchangeinfo)
kable(c.table)
# reproduce the above results here
dt %>% filter(condition == 0, exchangeinfo == 2) %>%
nrow()  ##how many people chose not to exchange contact info in the hypothetical condition? 51
dt %>% filter(condition == 0, exchangeinfo == 1) %>%
nrow() ## 10 chose to exchange
dt %>% filter(condition == 1, exchangeinfo == 2) %>%
nrow()  #how many chose not to exchange in the real? 45
dt %>% filter(condition == 1, exchangeinfo == 1) %>%
nrow() ##26 chose to exchange
summary(dt)
c.table <- table(dt$condition, dt$exchangeinfo)
kable(test)
test
ggplot(dt) + aes(x = condition, fill = exchangeinfo) +
geom_bar () +
scale_fill_hue()
dt2 <- table(dt$condition, dt$exchangeinfo) #contingency table
dt2
c.table
dt2 <- table(dt$condition, dt$exchangeinfo) #contingency table
test <- chisq.test(dt2)
test
test <- chisq.test(dt2, correct = FALSE)
test
?chisq.test
dt2
summary(test)
test
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
library(haven)
library(knitr)
head(d)
str(d)
colnames(d)
glimpse(d)
range(d$Game1Angry1)
unique(d$Game1Angry1)
hist(d$Game1Angry1)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
library(haven)
library(knitr)
knitr::opts_chunk$set(eval = FALSE)
Tamiretal2008ReplicationData <- read.sav("~/Dropbox/My Mac (PSY-C02D76FGML85)/Downloads/Tamiretal2008ReplicationData.sav")
Tamiretal2008ReplicationData <- read_sav("~/Dropbox/My Mac (PSY-C02D76FGML85)/Downloads/Tamiretal2008ReplicationData.sav")
d = Tamiretal2008ReplicationData
d
head(d)
str(d)
colnames(d)
glimpse(d)
range(d$Game1Angry1)
unique(d$Game1Angry1)
hist(d$Game1Angry1)
unique(d$Game1Angry1)
range(d$Game1Angry1)
glimpse(d)
hist(d$Game1Angry1)
tail(d)
head(d)
d$DoNotUse
unique(d$DoNotUse)
str(d$DoNotUse)
?is.na
#exclude subjects marked do not use
filtered_d = d %>%
#filter(Subject != 2, Subject != 23) %>%
filter(is.na(DoNotUse))# your code here: exclude subjects that are marked as "DoNotUse"
filtered_d
tail(filtered_d)
filtered_d = filtered_d %>%
dplyr::select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies","SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
dplyr::select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
dplyr::select(-starts_with("Game")) # your code here: remove the columns containing "Game" in the name
performance_hyp_d
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% tidyr::pivot_longer(
cols = -c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
tidyr:: pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>% select(-Game1Intro, -Game2Intro, -Game3Intro, -Game4Intro) %>%
tidyr:: pivot_longer(cols = -c("Subject", "Cond"),
names_to="Measurement",
values_to="Rating")   #your code here
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
performance_hyp_long_d
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(IsRecall = grepl("Friends|Strangers", Measurement))
rating_hyp_long_d
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
rating_summary_d = rating_hyp_long_d %>%
group_by(ConfrontationalGame, Emotion) %>%
summarise(MeanRating = mean(Rating, na.rm = T))
## your code here
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
##select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, WithMusic, MusicCondition)
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, WithMusic, MusicCondition, na..rm = T)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
##select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
##select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score))
performance_hyp_long_d
rating_summary_d = rating_hyp_long_d %>%
group_by(ConfrontationalGame, Emotion) %>%
summarise(MeanRating = mean(Rating, na.rm = T))
## your code here
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
##select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_hyp_long_d
performance_diff_d
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
##select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition)
mutate(Mean.D.score = (PostMusic - PreMusic))
performance_diff_summary_d = performance_diff_d %>% mutate(Mean.D.score = (PostMusic - PreMusic)) %>%
group_by(ConfrontationalGame, MusicCondition)
## Your code here
performance_diff_summary_d
summarise(Mean.D.score)
summarise(Mean.D.score = (PostMusic - PreMusic))
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition)
summarise(Mean.D.score = (PostMusic - PreMusic))
## Your code here
performance_diff_summary_d = performance_diff_d %>% summarise(Mean.D.score = (PostMusic - PreMusic))
group_by(ConfrontationalGame, MusicCondition)
?summarise
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition)
summarise(MeanImprovementScore = mean(ImprovementScore)
## Your code here
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarise(MeanImprovementScore = mean(ImprovementScore))
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarise(MeanImprovementScore = mean(ImprovementScore, na.rm = FALSE))
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarise(MeanImprovementScore = mean(ImprovementScore, na.rm = TRUE))
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarise(MeanImprovementScore = mean(ImprovementScore))
## Your code here
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
mutate_all(~replace_na(0))
performance_diff_summary_d
summarise(MeanImprovementScore = mean(ImprovementScore))
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
mutate_all(~replace(., is.na(.),0)) %>%
summarise(MeanImprovementScore = mean(ImprovementScore))
## Your code here
performance_diff_summary_d
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
##mutate_all(~replace(., is.na(.),0)) %>%
summarise(MeanImprovementScore = mean(ImprovementScore))
## Your code here
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%  tidyr::replace_na(list(PreMusic=0, PostMusic=0)) %>%
group_by(ConfrontationalGame, MusicCondition) %>%
##mutate_all(~replace(., is.na(.),0)) %>%
summarise(MeanImprovementScore = mean(ImprovementScore))
performance_diff_summary_d
knitr::opts_chunk$set(eval = FALSE)
Tamiretal2008ReplicationData <- read_sav("~/Dropbox/My Mac (PSY-C02D76FGML85)/Downloads/Tamiretal2008ReplicationData.sav")
d = Tamiretal2008ReplicationData
d
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
# #optional packages:
library(broom)
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
# #optional packages:
library(broom)
fvs <- read_csv("data/FVS2011-hands.csv")
fvs <- read_csv("d~/R Mac working folder/class/problem_sets/data/FVS2011-hands.csv")
fvs <- read_csv("~/R Mac working folder/class/problem_sets/data/FVS2011-hands.csv")
?broom
library(tidyverse)
library(knitr)
fvs <- read_csv("~/R Mac working folder/class/problem_sets/data/FVS2011-hands.csv")
str(fvs)
view(fvs)
glimpse(fvs)
unique(fvs$subid)
fvs
ggplot(fvs, aes(x=age)) + geom_histogram()
ggplot(fvs, aes(x=age)) + geom_histogram(binwidth = 20)
ggplot(fvs, aes(x=age)) + geom_histogram()
df <- fvs %>% select(age) %>% group_by(subid)
df <- fvs %>% group_by(subid)
df <- fvs %>% group_by(subid)
ggplot(df, aes(x=age)) + geom_histogram()
ggplot(fvs, aes(x=age)) + geom_histogram()
ggplot(df, aes(x=age)) + geom_histogram()
df <- fvs %>% select(condition = Faces_Medium)
df <- fvs %>% select(condition == "Faces_Medium")
df <- fvs %>% select(condition == Faces_Medium)
df <- fvs %>% filter(condition == "Faces Medium")
ggplot(df, aes(x=age)) + geom_histogram()
df
df <- fvs %>% arrange(desc(subid))
df <- fvs %>% arrange(desc(subid))
df
df <- fvs %>% arrange(subid)
df
df <- fvs %>% arrange(subid) %>% group_by(subid) %>%
summarise(
n = n(),
age = age)
df
df <- fvs %>% arrange(subid) %>% group_by(subid) %>% filter(condition == 'Faces_Medium') %>%
summarise(
n = n(),
age = age)
df
df <- fvs %>% arrange(subid) %>% group_by(subid) %>% filter(condition == 'Faces_Plus') %>%
summarise(
n = n(),
age = age)
df
df <- fvs %>% arrange(subid) %>% group_by(subid) %>% filter(condition == 'Faces_Medium') %>%
summarise(
n = n(),
age = age)
df
ggplot(df, aes(x=age)) + geom_histogram()
ggplot(fvs, aes(x=age)) + geom_histogram()
fvs
fvs$subid
fva %>% ggplot2::aes(x=age, y=condition)
fvs %>% ggplot2::aes(x=age, y=condition)
fvs %>% ggplot2::aes(x=age, y=condition) + geom_point()
fvs
fvs %>% ggplot2::aes(x=age, y=hand.look) + geom_point() + geom_smooth()
ggplot(fvs, aes(x=age, y=hand.look) + geom_point() + geom_smooth()
ggplot(fvs, aes(x=age, y=hand.look) + geom_point() + geom_smooth(method = lm)
ggplot(fvs, aes(x=age, y=hand.look, color=condition) + geom_point() + geom_smooth(method = lm)
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm)
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm) +
theme_dark()
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm) +
theme_q
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm) +
theme_grey()
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm) +
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm) +
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm)
ggplot(fvs, aes(x=age)) + geom_histogram()  #may be wrong because adding in duplicates ages per participant - how to get only 1 age per subid?
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm)+
labs(title="Hand Looking ~ Age and Condition", x="Age", y="Hand Looking Time")
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm)+
labs(title="Hand Looking ~ Age and Condition", x="Age", y="Hand Looking Time") +
theme_minimal()
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm)+
labs(title="Hand Looking ~ Age and Condition", x="Age", y="Hand Looking Time")
ggplot(fvs, aes(x=age, y=hand.look, color=condition)) +
geom_point() +
geom_smooth(method = lm)+
labs(title="Hand Looking ~ Age and Condition", x="Age (Months)", y="Hand Looking Time")
library(tidyverse)
lm(hand.look ~ condition + age, fvs)
d.lm <- lm(hand.look ~ condition + age, fvs)
summary(d.lm)
fvs$condition <- to_factor(fvs$condition)
d.lm <- lm(hand.look ~ condition + age, fvs)
summary(d.lm)
fvs$condition <- to_factor(fvs$condition) #change to factors to make sure but R reads it ame, still significant with faces plus condition and age
d.lm <- lm(hand.look ~ condition + age, fvs) #shows relationships estimated from above
summary(d.lm)
library(tidyverse)
?rnorm
rnorm(30, mean = 0, sd = 1)
x <- rnorm(30, mean = 0, sd = 1)
hist(x)
x <- rnorm(30, mean = 0, sd = 1)
hist(x)
hist(x)
hist(x)
x <- rnorm(30, mean = 0, sd = 1)
hist(x)
# independent 2-group t-test
fvs %>% t.test(hand.look~condition) # where y is numeric and x is a binary factor
# independent 2-group t-test
t.test(fvs$hand.look~fvs$condition) # where y is numeric and x is a binary factor
# independent 2-group t-test
t.test(fvs$hand.look~fvs$condition) # where y is numeric and x is a binary factor - is there a sig diff in means between groups?
# independent 2-group t-test
ttest <- t.test(fvs$hand.look~fvs$condition) # where y is numeric and x is a binary factor - is there a sig diff in means between groups? - yes we can reject the null
summary(ttest)
ttest
names(ttest)
ttest$statistic
t.test(x)
x <- rnorm(30, mean = 0, sd = 1) #can reload this and keep visualizing the changes in histogram of means
hist(x)
t.test(x)
hist(x)
t.test(x)
x <- rnorm(30, mean = 0, sd = 1) #can reload this and keep visualizing the changes in histogram of means
hist(x)
t.test(x)
x <- rnorm(30, mean = 0, sd = 1) #can reload this and keep visualizing the changes in histogram of means
hist(x)
t.test(x)
ts = replicate(10000,t.test(rnorm(30),rnorm(30))$statistic)
ts
ts = replicate(10000,t.test(rnorm(30))$statistic)
ts
range(ts)
t.test(x)
T.test.d <- ttest %>% replicate(10000,t.test(rnorm(30))$statistic)
T.test.d <- ttest %>% replicate(10000,t.test(rnorm(30))$statistic)
ts = replicate(10000,t.test(rnorm(30))$statistic)
range(ts)
ts = replicate(10000,t.test(rnorm(30))$statistic)
range(ts)
x <- rnorm(30, mean = 0, sd = 1) #can reload this and keep visualizing the changes in histogram of means
hist(x)
